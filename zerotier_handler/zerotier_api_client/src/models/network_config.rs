/*
 * ZeroTier Central API
 *
 * ZeroTier Central Network Management Portal API.<p>All API requests must have an API token header specified in the <code>Authorization: token xxxxx</code> format.  You can generate your API key by logging into <a href=\"https://my.zerotier.com\">ZeroTier Central</a> and creating a token on the Account page.</p><p>eg. <code>curl -X GET -H \"Authorization: token xxxxx\" https://api.zerotier.com/api/v1/network</code></p><p><h3>Rate Limiting</h3></p><p>The ZeroTier Central API implements rate limiting.  Paid users are limited to 100 requests per second.  Free users are limited to 20 requests per second.</p> <p> You can get the OpenAPI spec here as well: <code>https://docs.zerotier.com/api/central/ref-v1.json</code></p>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkConfig {
    /// Network ID
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    /// Time the network was created
    #[serde(rename = "creationTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<Option<i64>>,
    /// Array of network capabilities
    #[serde(rename = "capabilities", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "dns", skip_serializing_if = "Option::is_none")]
    pub dns: Option<models::Dns>,
    /// Enable broadcast packets on the network
    #[serde(rename = "enableBroadcast", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_broadcast: Option<Option<bool>>,
    /// Range of IP addresses for the auto assign pool
    #[serde(rename = "ipAssignmentPools", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ip_assignment_pools: Option<Option<Vec<models::IpRange>>>,
    /// Time the network was last modified
    #[serde(rename = "lastModified", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<Option<i64>>,
    /// MTU to set on the client virtual network adapter
    #[serde(rename = "mtu", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mtu: Option<Option<i32>>,
    /// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
    #[serde(rename = "multicastLimit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub multicast_limit: Option<Option<i32>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
    #[serde(rename = "private", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub private: Option<Option<bool>>,
    #[serde(rename = "routes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub routes: Option<Option<Vec<models::Route>>>,
    #[serde(rename = "rules", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rules: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "ssoConfig", skip_serializing_if = "Option::is_none")]
    pub sso_config: Option<Box<models::NetworkSsoConfig>>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "v4AssignMode", skip_serializing_if = "Option::is_none")]
    pub v4_assign_mode: Option<Box<models::Ipv4AssignMode>>,
    #[serde(rename = "v6AssignMode", skip_serializing_if = "Option::is_none")]
    pub v6_assign_mode: Option<Box<models::Ipv6AssignMode>>,
}

impl NetworkConfig {
    pub fn new() -> NetworkConfig {
        NetworkConfig {
            id: None,
            creation_time: None,
            capabilities: None,
            dns: None,
            enable_broadcast: None,
            ip_assignment_pools: None,
            last_modified: None,
            mtu: None,
            multicast_limit: None,
            name: None,
            private: None,
            routes: None,
            rules: None,
            sso_config: None,
            tags: None,
            v4_assign_mode: None,
            v6_assign_mode: None,
        }
    }
}

