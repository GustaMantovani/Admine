/*
 * ZeroTier Central API
 *
 * ZeroTier Central Network Management Portal API.<p>All API requests must have an API token header specified in the <code>Authorization: token xxxxx</code> format.  You can generate your API key by logging into <a href=\"https://my.zerotier.com\">ZeroTier Central</a> and creating a token on the Account page.</p><p>eg. <code>curl -X GET -H \"Authorization: token xxxxx\" https://api.zerotier.com/api/v1/network</code></p><p><h3>Rate Limiting</h3></p><p>The ZeroTier Central API implements rate limiting.  Paid users are limited to 100 requests per second.  Free users are limited to 20 requests per second.</p> <p> You can get the OpenAPI spec here as well: <code>https://docs.zerotier.com/api/central/ref-v1.json</code></p>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Network : Network object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Network {
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    #[serde(rename = "clock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clock: Option<Option<i64>>,
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<Box<models::NetworkConfig>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "rulesSource", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rules_source: Option<Option<String>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<std::collections::HashMap<String, models::Permissions>>,
    #[serde(rename = "ownerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<Option<String>>,
    /// Note: May be 0 on endpoints returning lists of Networks
    #[serde(rename = "onlineMemberCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub online_member_count: Option<Option<i32>>,
    #[serde(rename = "authorizedMemberCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub authorized_member_count: Option<Option<i32>>,
    #[serde(rename = "totalMemberCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub total_member_count: Option<Option<i32>>,
    #[serde(rename = "capabilitiesByName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub capabilities_by_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "tagsByName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags_by_name: Option<Option<serde_json::Value>>,
}

impl Network {
    /// Network object
    pub fn new() -> Network {
        Network {
            id: None,
            clock: None,
            config: None,
            description: None,
            rules_source: None,
            permissions: None,
            owner_id: None,
            online_member_count: None,
            authorized_member_count: None,
            total_member_count: None,
            capabilities_by_name: None,
            tags_by_name: None,
        }
    }
}

